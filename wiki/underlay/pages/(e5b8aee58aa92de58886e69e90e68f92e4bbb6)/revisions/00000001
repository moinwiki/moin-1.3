## Please edit system and help pages ONLY in the moinmaster wiki! For more
## information, please see MoinMaster:MoinPagesEditorGroup.
## Please edit (or translate) system/help pages on the moinmaster wiki ONLY.
## For more information, please see MoinMaster:MoinPagesEditorGroup.
##master-page:HelpOnParsers
##master-date:2004-10-26 12:28:57
#acl MoinPagesEditorGroup:read,write,delete,revert All:read
#format wiki
#language zh


[[TableOfContents]]

= Parsers =

Parsers go through the contents of a page to create a sequence of formatter calls which in sequence create some readable output. Moin will choose the parser for a page using different techniques: FORMAT Processing Instruction (see HelpOnProcessingInstructions) and code display regions (see HelpOnFormatting).

A `#FORMAT` pi can be used to tell moin which parser to use for the whole page content. By default this is the wiki parser. Example: {{{#FORMAT cplusplus
... some cplusplus source ...
}}}

With the use of code display regions, a parser can be applied to only a part of a page (this was a processor region in earlier versions of Moin). You specify which parser to call by using a bang path-like construct in the first line. A bang path is a concept known from Unix command line scripts, where they serve the exact same purpose: the first line tells the shell what program to start to process the remaining lines of the script. Example: {{{
{ { {#!CSV
a,b,c
d,e,f
} } }
}}}

For more information on the possible markup, see HelpOnEditing. 

== ParserBase ==

!ParserBase is a parser utility class used to produce colorized source displays. It is easily extended. The HTML Formatter will render such code displays with switchable linenumbers, if the browser supports DOM and !JavaScript.

A !ParserBase colorization parser understands the following arguments to a `#FORMAT` pi or a hashbang line. Just add those arguments after the name of the parser (`#FORMAT python start=10 step=10 numbering=on` or `#!python numbering=off`).

 numbers:: is linenumbering should be added. defaults to 'on'. possible values: 'on', 'off' (no linenumbers, but javascript to add them), 'disable' (no line numbers at all)
 start:: where to start with numbering. defaults to 1
 step:: increment to the linenumber. defaults to 1

Moin comes with a few examples from which you can go on:

=== cplusplus ===

{{{#!cplusplus
int main(int argc, char **argv) {
  return 0;
}
}}}

=== java ===

{{{#!java
import java.util.Date;
import java.util.Calendar;

public class IntDate
{
  public static Date getDate(String year, String month, String day)
    {
      // Date(int, int, int) has been deprecated, so use Calendar to
      // set the year, month, and day.
      Calendar c = Calendar.getInstance();
      // Convert each argument to int.
      c.set(Integer.parseInt(year),Integer.parseInt(month),Integer.parseInt(day));
      return c.getTime();
    }
}
}}}

=== pascal ===

{{{#!pascal
function TRegEx.Match(const s:string):boolean;
var
    l,i : integer;
begin
    result := MatchPos(s,l,i);
end;
}}}

== python ==

Colorizes python code. It allows the same arguments as the !ParserBase parsers.

{{{#!python
def hello():
    print "Hello World!"
}}}

== CSV ==

The CSV parser works on so-called ''comma separated values'', though the comma is now usually a semicolon. 
The first line is considered to contain column titles that are rendered in '''bold''', so when you don't want table headers, leave the first line empty.

The bang path can contain "`-`''index''" arguments, to hide certain columns from the output; column indices are counted starting from 1.

 /!\ The current code contains a ''very'' simple CSV parser.

MoinMoin Version History: {{{#!CSV -3
Version;Date;HIDDEN!
0.11;2002-03-11;Revision 1.151
0.10;2001-10-28;Revision 1.134
0.9;2001-05-07;
0.8;2001-01-23;
0.7;2000-12-06;
0.6;2000-12-04;
0.5;2000-11-17;
0.4;2000-11-01;
0.3;2000-10-25;
0.2;2000-08-26;
0.1;2000-07-29;
}}}

此页的英文版本：HelpOnParsers
