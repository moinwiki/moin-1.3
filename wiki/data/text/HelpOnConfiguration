##language:en
HelpContents > HelpOnAdministration > HelpOnConfiguration

'''Subtopics'''
 * /CascadingStyleSheets
 * /EmailSupport
 * /SecurityPolicy

'''Index'''
[[TableOfContents]]

== Configuration of MoinMoin ==

MoinMoin is configured by changing the `moin_config.py` file, which normally sits besides your `moin.cgi` driver script. `moin_config.py` is imported by the MoinMoin main code early in a request cycle and is found because the current directory (i.e. that of `moin.cgi`) is part of the Python system path. Consequently, `moin_config.py` can sit anywhere in your `PYTHONPATH`.

=== Overview of configuration options ===

The following table contains default values and a short description for all configuration variables. Most of these can be left at their defaults, those you need to change with every installation are listed in the sample `moin_config.py` that comes with the distribution.

||<rowbgcolor="#FFFFE8"> '''Variable name''' || '''Default''' || '''Description''' ||
|| Log''''''Store || 'text:editlog' || ''Experimental, keep the default'' ||
|| Security''''''Policy || None || class object hook for implementing security restrictions ||
|| acl_enabled (& acl_...) || 0 || ''true'' to enable Access Control Lists - fine grained page access rights settings (see HelpOnAccessControlLists) ||
|| allow_extended_names || 1 || ''true'' to enable {{{["non-standard wikiname"]}}} markup ||
|| allow_subpages || 1 || ''true'' to enable hierarchical wiki features (see HelpOnEditing/SubPages) ||
|| allow_numeric_entities || 1 || if ''true'', numeric entities like `&#8364;` for &#8364; are not escaped, but &amp; and stuff still is ||
|| allow_xslt || 0|| ''true'' to enable XSLT processing via 4Suite (note that this enables anyone with enough know-how to insert '''arbitrary HTML''' into your wiki, which is why it defaults to 0) ||
|| allowed_actions || [] || allow unsafe actions (list of strings) ||
|| attachments || None || If {{{None}}}, send attachments via CGI; else this has to be a dictionary with the path to attachment storage (key ''dir'') and the equivalent URL prefix to that same dir (key ''url'')||
|| auth_http_enabled || 0 || ''true'' to enable moin using the username of a user already authenticated by http basic auth ||
|| backtick_meta || 1 || ''true'' to enable {{{`inline literal`}}} markup ||
|| bang_meta || 0 || ''true'' to enable {{{!NoWikiName}}} markup ||
|| caching_formats || ['text_html'] || output formats that are cached; set to [] to turn off caching (useful for development) ||
|| changed_time_fmt || '%H:%M' || Time format used on RecentChanges  for page edits within the last 24 hours ||
|| charset || 'iso-8859-1' || The encoding / character set your system uses ||
|| chart_options || None || if you have gdchart, use something like chart_options = {'width': 720, 'height': 540} ||
|| check_i18n || 0 || Set to 1 only in development systems, or on a translator's system ||
|| cookie_lifetime || 12 || 12 hours from now until the MoinMoin cookie expires and you get logged out ||
|| data_dir || './data/' || Path to the data directory, the default is OK if you place the data directory right besides your `moin.cgi` ||
|| date_fmt || '%Y-%m-%d' || System date format, used mostly in RecentChanges ||
|| datetime_fmt || '%Y-%m-%d %H:%M:%S' || Default format for dates and times (when the user has no preferences or chose the "default" date format) ||
|| default_lang || 'en' || default language for page contents, and also the default user language if not set by other means ||
|| default_markup || 'wiki' || Default page parser / format (name of module in `MoinMoin.parser`)  ||
|| edit_locking || 'warn 10' || Editor locking policy: `None`, `'warn <timeout in minutes>'`, or `'lock <timeout in minutes>'` ||
|| edit_rows || 30 || Default height of the edit box ||
|| hosts_deny || `[]` || List of denied IPs; if an IP ends with a dot, it denies a whole subnet (class A, B or C) ||
|| html_head || '' || Additional <HEAD> tags for all pages (see HelpOnSkins) ||
|| html_head_queries || ''META-Tag with "NOINDEX,NOFOLLOW" for robots'' || Additional <HEAD> tags for edit and action pages (`html_head` is sent, too; see HelpOnSkins) ||
|| html_pagetitle || None || Allows you to set a specific HTML page title (if not set, it defaults to the value of `sitename`) ||
|| httpd_docs || './wiki-moinmoin' || directory with public files, when using the stand-alone server ||
|| httpd_host || 'localhost' || hostname of the stand-alone server ||
|| httpd_port || 8080 || port of the stand-alone server ||
|| httpd_user || 'nobody' || user to run the stand-alone server under (UNIX only) ||
|| interwikiname || None || InterWiki name (prefix, moniker) of the site, or None ||
|| logo_string || '<img src="%s" border="0" alt="%s">' % (logo_url, sitename) || The '''img''' tag used to format the logo display in the upper-left corner of a page and used in RSS documents ||
|| logo_url || ''MoinMoin logo'' || The URL path to the logo used by `logo_string` above ||
|| lowerletters || ''Latin 1 alphabetic characters and digits'' || Lowercase letters, used to define what is a WikiName ||
|| mail_from || None || `From:` header used in sent mails ||
|| mail_login || None || "user pwd" if you need to use SMTP AUTH ||
|| mail_smarthost || None || IP or domain name of an SMTP-enabled server; note that email features (notification, mailing of login data) works only if this variable is set ||
|| max_macro_size || 50 || Maximum size of some macro pages in KB, especially used to limits the size of RecentChanges; use `0` to disable that feature ||
|| navi_bar || list of default quick links || Most important links in text form (these links can be over-ridden by the user's quick links); to link to any URL, use a free-form link of the form "`[url text]`" ||
|| nonexist_qm || 0 || Default for displaying WantedPages with a question mark, like in the original wiki (changeable by the user) ||
|| page_category_regex || '^Category[A-Z]' || Pagenames containing a match for this regex are regarded as Wiki categories ||
|| page_credits || MoinMoin and PythonPowered || html fragment with logos or strings for crediting ||
|| page_dict_regex || '[a-z]Dict$' || Pagenames containing a match for this regex are regarded as containing variable dictionary definitions ||
|| page_footer1 || '' || Custom HTML markup sent ''before'' the system footer (see HelpOnSkins) ||
|| page_footer2 || '' || Custom HTML markup sent ''after'' the system footer (see HelpOnSkins) ||
|| page_form_regex || '[a-z]Form$' || Pagenames containing a match for this regex are regarded as containing form definitions ||
|| page_front_page || 'FrontPage' || Name of the front page ||
|| page_group_regex || '[a-z]Group$' || Pagenames containing a match for this regex are regarded as containing group definitions ||
|| page_header1 || '' || Custom HTML markup sent ''before'' the system header / title area (see HelpOnSkins) ||
|| page_header2 || '' || Custom HTML markup sent ''after'' the system header / title area (see HelpOnSkins) ||
|| page_iconbar || ["view", ...] || list of icons to show in iconbar ||
|| page_icons_table || dict || dict of {'iconname': (url, title, icon-img-key), ...} ||
|| page_license_enabled || 0 || Show a license hint in page editor. ||
|| page_license_page || 'WikiLicense' || Page linked from the license hint. ||
|| page_local_spelling_words || 'LocalSpellingWords' || Name of the page containing user-provided spellchecker words ||
|| page_template_regex || '[a-z]Template$' || Pagenames containing a match for this regex are regarded as templates for new pages ||
|| refresh || None || refresh = (minimum_delay_s, targets_allowed) enables use of `#refresh 5 PageName` processing instruction, targets_allowed must be either `'internal'` or `'external'` ||
|| shared_intermap || None || path to a file containing global InterWiki definitions (or a list of such filenames) ||
|| show_hosts || 1 || ''true'' to show hostname in RecentChanges ||
|| show_section_numbers || 1 || ''true'' to show section numbers in headings by default ||
|| show_timings || 0 || shows some timing values at bottom of page - used for development ||
|| show_version || 0 || show MoinMoin's version at the bottom of each page ||
|| sitename || 'An Unnamed MoinMoin Wiki' || Short description of your wiki site, displayed below the logo on each page, and used in RSS documents as the channel title ||
|| smileys || {} || User-defined smileys (a dict with the markup as the key and a tuple of width, height, border, image name as the value) ||
|| theme_default || 'classic' || the name of the theme that is used by default (see HelpOnThemes) ||
|| theme_force || False || if True, do not allow to change the theme ||
|| trail_size || 5 || Number of pages in the trail of visited pages ||
|| tz_offset || 0.0 || default time zone offset in hours from UTC ||
|| ua_spiders || ...|google|wget|... || A regex of HTTP_USER_AGENTs that should be excluded from logging ||
|| umask || 0770 || umask used on all open(), mkdir() and similar calls ||
|| upperletters || ''Latin 1 alphabetic characters'' || Uppercase letters, used to define what is a WikiName ||
|| url_mappings || {} || lookup table to remap URL prefixes (dict of {{{'prefix': 'replacement'}}}); especially useful in intranets, when whole trees of externally hosted documents move around ||
|| url_prefix || '/wiki' || Used as the base URL for all public documents served by the wiki, especially the image files for the icons ||
|| url_schemas || [] || additional URL schemas you want to have recognized (list of strings) ||


=== Changing character sets ===

If you want to use MoinMoin with a character set other than Latin-1, you might or even have to change the default character sets for WikiName``s in "moin_config.py". A safe default is US-ASCII, i.e. {{{
upperletters = "A-Z"
lowerletters = "0-9a-z"
}}}

With that setting, you need to set "`allow_extended_names=1`" and use the special markup for extended WikiName``s `["extended name"]` to get any names with characters outside the core latin alphabet.

[[Anchor(file-attachments)]]
=== File attachments ===

The [wiki:Self:HelpOnActions/AttachFile AttachFile action] enables a page to have multiple attached files.
Since file uploads could be abused for DoS (Denial of Service) attacks, `AttachFile` is an action that may be enabled by the wiki administrator. To do this, add "`allowed_actions = ['AttachFile']`" to your configuration file.

If you wiki has (or is expected to have) many file attachments, there is an option which will eliminate the CGI overhead associated with each retrieval of an attachment file. 

There are two storage/retrieval models for file attachments:
 1. Attachments are stored "privately" and can only be retrieved via a CGI GET (via URLs like `http://myorg.org/mywiki/<SomePage>?action=AttachFile&do=get&target=filename.ext`).
 1. Attachments are stored into a directory directly accessible by the web server, and can thus be served directly by the webserver, without any invocation of MoinMoin (leading to URLs like `http://myorg.org/mywikiattach/<Somepage>/attachments/filename.ext`).

If the efficiency of serving file attachments is a concern, the second option is preferable, but it also requires additional configuration steps and possibly more rights on the host machine. Because of this, the first option is the default; attachments are stored in the "...mywiki/data/pages/" directory, with paths like "`...mywiki/data/pages/<pagename>/attachments/<filename>`".

The MoinMoin ''attachments'' configuration option allows you to move the directory structure used to store attachments to another location.  Unless you have a reason for doing so, there is no need to use a different location. Using a different location may be more work and more risk, as all the existing attachments must be copied to the new location. The following instructions are for Apache servers and assume you intend to leave the attachment files in their existing location and your original installation used the name "mywiki".

The first step is to tell Apache that it has another Alias directory from which it can serve files. Review the changes you made to the httpd.conf (or commonhttpd.conf) file during the Moin``Moin installation and find the Script``Alias statement similar to the following:
{{{
    ScriptAlias /mywiki           ".../mywiki/moin.cgi" 
}}}
Create an Alias statement similar to the Script``Alias statement above, replacing the ''/mywiki'' URI with ''/mywikiattach/'' and replacing ''moin.cgi'' with ''data/pages/''.
{{{
    Alias       /mywikiattach/    ".../mywiki/data/pages/"
}}}
Be sure to note the differences in the trailing slashes between the two statements, they must be entered exactly as shown above. If you are making this change to a running system, you must restart Apache to have the change take effect.

The second step is to tell MoinMoin to let Apache do the work of fetching file attachments. To do this,
you need to add an `attachments` option to .../mywiki/moin_config.py. The 'attachment' option is a dictionary of two values: {{{
attachments = {
    'dir': '.../mywiki/data/pages',
    'url': '/mywikiattach',
}
}}}
Moin``Moin must still do the work of uploading file attachments. The ''dir'' value above tells Moin``Moin where to store attachments; note this is the same as the path in the new Apache Alias statement but without the trailing "/". The ''url'' value tells Moin``Moin how to retrieve the attachments; this matches the URI in the Alias statement but again without the trailing "/".

After you have completed the configuration changes, test by uploading an attachment for WikiSandBox. Then modify the WikiSandBox page to display the uploaded image or download the file. If there were existing attachments before this change, verify the old attachments are still available.  Finally, review the Apache ''access.log'' file to verify you have a log entry showing the expected file access:

  * ''"...GET /mywikiattach/Wiki``Sand``Box/attachments/mypix.jpg HTTP/1.1..."''.

